@page "/editor/{url}"
@using System.Net.Http.Headers
@attribute [Authorize]
@inject Services.IPostService PostService
@inject NavigationManager NavigationManager

<div class="editor">
    <div class="heading">
        @if (_edit)
        {
            <h1>Edit Post</h1>
        }
        else
        {
            <h1>Create New Post</h1>
        }
    </div>
    <EditForm Model="@_post" OnValidSubmit="HandlePostAsync">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <div class="form-main">
                <div>
                    <label for="url">Url</label>
                    <RadzenTextBox id="url" @bind-Value="_post.Url"/>
                    <ValidationMessage For="@(() => _post.Url)"/>
                </div>
                <div>
                    <label for="title">Title</label>
                    <RadzenTextBox id="title" @bind-Value="_post.Title"/>
                    <ValidationMessage For="@(() => _post.Title)"/>
                </div>
                <div>
                    <label for="description">Description</label>
                    <RadzenTextBox id="description" @bind-Value="_post.Description"/>
                    <ValidationMessage For="@(() => _post.Description)"/>
                </div>
                <div>
                    <label for="date">Date</label>
                    <RadzenDatePicker id="date" @bind-Value="_post.Created"/>
                </div>
                <div>
                    <label for="isPublished">Published</label>
                    <RadzenCheckBox id="isPublished" @bind-Value="_post.IsPublished"/>
                </div>
                <div class="form-action">
                    @if (_edit)
                    {
                        <RadzenButton ButtonType="ButtonType.Submit" Style="background-color: #F0CC1D">Update</RadzenButton>
                    }
                    else
                    {
                        <RadzenButton ButtonType="ButtonType.Submit" Style="background-color: #26b050">Create</RadzenButton>
                    }
                    <RadzenButton Style="background-color: #F0681D" Click="DeletePostAsync">Delete</RadzenButton>
                </div>
            </div>
            <div class="form-image">
                <label>Image</label>
                <InputFile OnChange="OnFileChange"/>
                @if (_post.ImageUrl != null)
                {
                    <div>
                        <img src="@_post.ImageUrl" style="width:300px" alt=""/>
                    </div>
                }
            </div>
            <div class="form-content">
                <RadzenHtmlEditor @bind-Value=_post.Content style="height: 500px; margin-top: 1rem;" UploadUrl="upload/image">
                    <RadzenHtmlEditorUndo/>
                    <RadzenHtmlEditorRedo/>
                    <RadzenHtmlEditorSeparator/>
                    <RadzenHtmlEditorBold/>
                    <RadzenHtmlEditorItalic/>
                    <RadzenHtmlEditorUnderline/>
                    <RadzenHtmlEditorStrikeThrough/>
                    <RadzenHtmlEditorSeparator/>
                    <RadzenHtmlEditorColor/>
                    <RadzenHtmlEditorBackground/>
                    <RadzenHtmlEditorRemoveFormat/>
                </RadzenHtmlEditor>
                <ValidationMessage For="@(() => _post.Content)"/>
            </div>
        </div>
        <ValidationSummary/>
    </EditForm>
</div>

@code
{
    private BlazorBlog.Shared.Models.Post _post;
    private string _url;
    private bool _edit;

    [Parameter]
    public string Url
    {
        get => _url;
        set
        {
            _url = value;
            _post = new BlazorBlog.Shared.Models.Post();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _edit = false;
        if (Url != "create")
        {
            _post = await PostService.GetPostByUrl(Url);
            _edit = true;
        }
    }

    private async void HandlePostAsync()
    {
        _post.Edited = DateTime.Now;
        BlazorBlog.Shared.Models.Post result;
        if (_edit)
        {
            result = await PostService.UpdatePostAsync(_post);
            if (_post.IsPublished)
                NavigationManager.NavigateTo($"/{result.Url}");
            else
                NavigationManager.NavigateTo($"/");
        }
        else
        {
            result = await PostService.CreateNewPostAsync(_post);
            NavigationManager.NavigateTo($"/{result.Url}");
        }
    }

    private async void DeletePostAsync()
    {
        await PostService.DeletePostAsync(_post.Url);
        NavigationManager.NavigateTo("/");
    }
    
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
                
        using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
            _post.ImageUrl = await PostService.UploadImageAsync(content);
        }
    }
}