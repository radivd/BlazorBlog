@page "/editor/{url}"
@using System.Net.Http.Headers
@attribute [Authorize]
@inject Services.IPostService PostService
@inject NavigationManager NavigationManager

<h3>Create New Post</h3>
<EditForm Model="@_post" OnValidSubmit="HandlePostAsync">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="url">Url</label>
        <InputText class="form-control" id="url" @bind-Value="_post.Url" />
        <ValidationMessage For="@(() => _post.Url)" />
    </div>
    <div class="form-group">
        <label for="title">Title</label>
        <InputText class="form-control" id="title" @bind-Value="_post.Title" />
        <ValidationMessage For="@(() => _post.Title)" />
    </div>
    <div class="form-file">
        <label for="image">Image</label>
        <InputFile OnChange="OnFileChange" />
        @if (_post.ImageUrl != null)
        {
            <div>
                <img src="@_post.ImageUrl" style="width:300px" />
            </div>
        }
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <InputText class="form-control" id="description" @bind-Value="_post.Description" />
        <ValidationMessage For="@(() => _post.Description)" />
    </div>
    <div class="form-group">
        <label for="content">Content</label>
        <InputTextArea class="form-control" id="content" @bind-Value="_post.Content" />
        <ValidationMessage For="@(() => _post.Content)" />
    </div>
    <div class="form-group">
        <label for="date">Date</label>
        <InputDate class="form-control" id="date" @bind-Value="_post.Created" />
    </div>
    <div class="form-check">
        <label for="isPublished">Published</label>
        <InputCheckbox class="form-check-input" id="isPublished" @bind-Value="_post.IsPublished" />
    </div>
    @if(_edit)
    {
        <button type="submit" class="btn btn-warning">Update</button>
    }
    else
    {
        <button type="submit" class="btn btn-success">Create</button>
    }
    <ValidationSummary />
    <button class="btn btn-danger" @onclick="DeletePostAsync">Delete</button>
</EditForm>


@code
{
    private BlazorBlog.Shared.Models.Post _post;
    private string _url;
    private bool _edit;

    [Parameter]
    public string Url
    {
        get => _url;
        set
        {
            _url = value;
            _post = new BlazorBlog.Shared.Models.Post();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _edit = false;
        if (Url != "create")
        {
            _post = await PostService.GetPostByUrl(Url);
            _edit = true;
        }
    }

    private async void HandlePostAsync()
    {
        _post.Edited = DateTime.Now;
        BlazorBlog.Shared.Models.Post result;
        if (_edit)
        {
            result = await PostService.UpdatePostAsync(_post);
            if (_post.IsPublished)
                NavigationManager.NavigateTo($"/{result.Url}");
            else
                NavigationManager.NavigateTo($"/");
        }
        else
        {
            result = await PostService.CreateNewPostAsync(_post);
            NavigationManager.NavigateTo($"/{result.Url}");
        }
    }

    private async void DeletePostAsync()
    {
        await PostService.DeletePostAsync(_post.Url);
        NavigationManager.NavigateTo("/");
    }
    
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
                    
            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                _post.ImageUrl = await PostService.UploadImageAsync(content);
            }
        }
    }
}